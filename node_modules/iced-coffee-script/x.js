(function() {
  var cantCompile, delay, foo, iced, multi, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  delay = function(cb, i) {
    i = i || 3;
    return setTimeout(cb, i);
  };

  atest("basic iced waiting", function(cb) {
    var i, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    i = 1;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      delay(__iced_deferrals.defer({
        lineno: 7
      }));
      __iced_deferrals._fulfill();
    })(function() {
      i++;
      return cb(i === 2, {});
    });
  });

  foo = function(i, cb) {
    var ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee",
        funcname: "foo"
      });
      delay(__iced_deferrals.defer({
        lineno: 12
      }), i);
      __iced_deferrals._fulfill();
    })(function() {
      return cb(i);
    });
  };

  atest("basic iced waiting", function(cb) {
    var i, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    i = 1;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      delay(__iced_deferrals.defer({
        lineno: 17
      }));
      __iced_deferrals._fulfill();
    })(function() {
      i++;
      return cb(i === 2, {});
    });
  });

  atest("basic iced trigger values", function(cb) {
    var i, j, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    i = 10;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      foo(i, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return j = arguments[0];
          };
        })(),
        lineno: 23
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(i === j, {});
    });
  });

  atest("basic iced set structs", function(cb) {
    var field, i, obj, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    field = "yo";
    i = 10;
    obj = {
      cat: {
        dog: 0
      }
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      foo(i, __iced_deferrals.defer({
        assign_fn: (function(__slot_1, __slot_2) {
          return function() {
            return __slot_1[__slot_2] = arguments[0];
          };
        })(obj.cat, field),
        lineno: 31
      }));
      field = "bar";
      __iced_deferrals._fulfill();
    })(function() {
      return cb(obj.cat.yo === i, {});
    });
  });

  multi = function(cb, arr) {
    var ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee",
        funcname: "multi"
      });
      delay(__iced_deferrals.defer({
        lineno: 36
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb.apply(null, arr);
    });
  };

  atest("defer splats", function(cb) {
    var i, obj, ok, out, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    v = [1, 2, 3, 4];
    obj = {
      x: 0
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      multi(__iced_deferrals.defer({
        assign_fn: (function(__slot_1) {
          return function() {
            __slot_1.x = arguments[0];
            return out = __slice.call(arguments, 1);
          };
        })(obj),
        lineno: 42
      }), v);
      __iced_deferrals._fulfill();
    })(function() {
      var _i, _ref;
      out.unshift(obj.x);
      ok = true;
      for (i = _i = 0, _ref = v.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (v[i] !== out[i]) {
          ok = false;
        }
      }
      return cb(ok, {});
    });
  });

  atest("continue / break test", function(cb) {
    var i, tot, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    tot = 0;
    (function(__iced_k) {
      var _i, _results, _while;
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i <= 100)) {
          return _break();
        } else {

          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 52
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              if (i === 3) {
                (function(__iced_k) {
_continue()
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              tot += i;
              (function(__iced_k) {
                if (i === 10) {
                  (function(__iced_k) {
_break()
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(_next);
            });
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(tot === 52, {});
    });
  });

  atest("for k,v of obj testing", function(cb) {
    var k, obj, s, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    obj = {
      the: "quick",
      brown: "fox",
      jumped: "over"
    };
    s = "";
    (function(__iced_k) {
      var _i, _k, _keys, _ref, _results, _while;
      _ref = obj;
      _keys = (function() {
        var _results1;
        _results1 = [];
        for (_k in _ref) {
          _results1.push(_k);
        }
        return _results1;
      })();
      _i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++_i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(_i < _keys.length)) {
          return _break();
        } else {
          k = _keys[_i];
          v = _ref[k];
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 62
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return _next(s += k + " " + v + " ");
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(s === "the quick brown fox jumped over ", {});
    });
  });

  atest("for k,v in arr testing", function(cb) {
    var i, obj, s, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    obj = ["the", "quick", "brown"];
    s = "";
    (function(__iced_k) {
      var _i, _len, _ref, _results, _while;
      _ref = obj;
      _len = _ref.length;
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i < _len)) {
          return _break();
        } else {
          v = _ref[i];
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 70
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return _next(s += v + " " + i + " ");
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(s === "the 0 quick 1 brown 2 ", {});
    });
  });

  atest("switch --- github issue #55", function(cb) {
    var ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      delay(__iced_deferrals.defer({
        lineno: 75
      }));
      __iced_deferrals._fulfill();
    })(function() {
      (function(__iced_k) {
        switch ("blah") {
          case "a":
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "test/iced.coffee"
              });
              delay(__iced_deferrals.defer({
                lineno: 78
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
            break;
          case "b":
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "test/iced.coffee"
              });
              delay(__iced_deferrals.defer({
                lineno: 80
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
            break;
          default:
            return __iced_k();
        }
      })(function() {
        return cb(true, {});
      });
    });
  });

  atest("switch-a-roos", function(cb) {
    var i, res, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    res = 0;
    (function(__iced_k) {
      var _i, _results, _while;
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i <= 4)) {
          return _break();
        } else {

          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 86
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              switch (i) {
                case 0:
                  return __iced_k(res += 1);
                case 1:
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "test/iced.coffee"
                    });
                    delay(__iced_deferrals.defer({
                      lineno: 90
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(res += 20);
                  });
                  break;
                case 2:
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "test/iced.coffee"
                    });
                    delay(__iced_deferrals.defer({
                      lineno: 93
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      if (false) {
                        return __iced_k(res += 100000);
                      } else {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "test/iced.coffee"
                          });
                          delay(__iced_deferrals.defer({
                            lineno: 97
                          }));
                          __iced_deferrals._fulfill();
                        })(function() {
                          return __iced_k(res += 300);
                        });
                      }
                    })(__iced_k);
                  });
                  break;
                default:
                  return __iced_k(res += i * 1000);
              }
            })(function() {
              return _next(i === 2 ? res += 10000 : void 0);
            });
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(res === 17321, {});
    });
  });

  atest("parallel awaits with classes", function(cb) {
    var MyClass, obj, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    MyClass = (function() {
      function MyClass() {
        this.val = 0;
      }

      MyClass.prototype.increment = function(wait, i, cb) {
        var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral1,
            filename: "test/iced.coffee",
            funcname: "MyClass.increment"
          });
          setTimeout(__iced_deferrals.defer({
            lineno: 110
          }), wait);
          __iced_deferrals._fulfill();
        })(function() {
          _this.val += i;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral1,
              filename: "test/iced.coffee",
              funcname: "MyClass.increment"
            });
            setTimeout(__iced_deferrals.defer({
              lineno: 112
            }), wait);
            __iced_deferrals._fulfill();
          })(function() {
            _this.val += i;
            return cb();
          });
        });
      };

      MyClass.prototype.getVal = function() {
        return this.val;
      };

      return MyClass;

    })();
    obj = new MyClass();
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      obj.increment(10, 1, __iced_deferrals.defer({
        lineno: 119
      }));
      obj.increment(20, 2, __iced_deferrals.defer({
        lineno: 120
      }));
      obj.increment(30, 4, __iced_deferrals.defer({
        lineno: 121
      }));
      __iced_deferrals._fulfill();
    })(function() {
      v = obj.getVal();
      return cb(v === 14, {});
    });
  });

  atest("loop construct", function(cb) {
    var i, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    i = 0;
    (function(__iced_k) {
      var _results, _while;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!true) {
          return _break();
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 128
            }));
            __iced_deferrals._fulfill();
          })(function() {
            i += 1;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "test/iced.coffee"
              });
              delay(__iced_deferrals.defer({
                lineno: 130
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (i === 10) {
                  (function(__iced_k) {
_break()
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "test/iced.coffee"
                  });
                  delay(__iced_deferrals.defer({
                    lineno: 132
                  }));
                  __iced_deferrals._fulfill();
                })(_next);
              });
            });
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(i === 10, {});
    });
  });

  atest("simple autocb operations", function(cb) {
    var b, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    b = false;
    foo = function(autocb) {
      var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "foo"
        });
        delay(__iced_deferrals.defer({
          lineno: 138
        }));
        __iced_deferrals._fulfill();
      })(function() {
        autocb(true);
        return;
      });
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      foo(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return b = arguments[0];
          };
        })(),
        lineno: 140
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(b, {});
    });
  });

  atest("AT variable works in an await (1)", function(cb) {
    var MyClass, o, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    MyClass = (function() {
      function MyClass() {
        this.flag = false;
      }

      MyClass.prototype.chill = function(autocb) {
        var ___iced_passed_deferral1, __iced_deferrals, __iced_k;
        __iced_k = autocb;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "MyClass.chill"
        });
        delay(__iced_deferrals.defer({
          lineno: 148
        }));
        __iced_deferrals._fulfill();
      };

      MyClass.prototype.run = function(autocb) {
        var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral1,
            filename: "test/iced.coffee",
            funcname: "MyClass.run"
          });
          _this.chill(__iced_deferrals.defer({
            lineno: 150
          }));
          __iced_deferrals._fulfill();
        })(function() {
          autocb(_this.flag = true);
          return;
        });
      };

      MyClass.prototype.getFlag = function() {
        return this.flag;
      };

      return MyClass;

    })();
    o = new MyClass;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      o.run(__iced_deferrals.defer({
        lineno: 154
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(o.getFlag(), {});
    });
  });

  atest("more advanced autocb test", function(cb) {
    var bar, oks, x, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function() {
      return "yoyo";
    };
    foo = function(val, autocb) {
      var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "foo"
        });
        delay(__iced_deferrals.defer({
          lineno: 160
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (val === 0) {
          autocb([1, 2, 3]);
          return;
        } else if (val === 1) {
          autocb({
            a: 10
          });
          return;
        } else if (val === 2) {
          autocb(bar());
          return;
        } else {
          autocb(33);
          return;
        }
      });
    };
    oks = 0;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      foo(0, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return x = arguments[0];
          };
        })(),
        lineno: 166
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (x[2] === 3) {
        oks++;
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "test/iced.coffee"
        });
        foo(1, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return x = arguments[0];
            };
          })(),
          lineno: 168
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (x.a === 10) {
          oks++;
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "test/iced.coffee"
          });
          foo(2, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return x = arguments[0];
              };
            })(),
            lineno: 170
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (x === "yoyo") {
            oks++;
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            foo(100, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return x = arguments[0];
                };
              })(),
              lineno: 172
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (x === 33) {
              oks++;
            }
            return cb(oks === 4, {});
          });
        });
      });
    });
  });

  atest("test of autocb in a simple function", function(cb) {
    var ok, simple, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    simple = function(autocb) {
      var ___iced_passed_deferral1, __iced_deferrals, __iced_k;
      __iced_k = autocb;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral1,
        filename: "test/iced.coffee",
        funcname: "simple"
      });
      delay(__iced_deferrals.defer({
        lineno: 178
      }));
      __iced_deferrals._fulfill();
    };
    ok = false;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      simple(__iced_deferrals.defer({
        lineno: 180
      }));
      __iced_deferrals._fulfill();
    })(function() {
      ok = true;
      return cb(ok, {});
    });
  });

  atest("test nested serial/parallel", function(cb) {
    var i, ok, slots, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    slots = [];
    (function(__iced_k) {
      var _fn, _i;
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      _fn = function(j, autocb) {
        var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral1,
            filename: "test/iced.coffee",
            funcname: "_fn"
          });
          delay(__iced_deferrals.defer({
            lineno: 189
          }), 5 * Math.random());
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral1,
              filename: "test/iced.coffee",
              funcname: "_fn"
            });
            delay(__iced_deferrals.defer({
              lineno: 190
            }), 4 * Math.random());
            __iced_deferrals._fulfill();
          })(function() {
            autocb(slots[j] = true);
            return;
          });
        });
      };
      for (i = _i = 0; _i <= 10; i = ++_i) {
        _fn(i, __iced_deferrals.defer({
          lineno: 192
        }));
      }
      __iced_deferrals._fulfill();
    })(function() {
      var _i;
      ok = true;
      for (i = _i = 0; _i <= 10; i = ++_i) {
        if (!slots[i]) {
          ok = false;
        }
      }
      return cb(ok, {});
    });
  });

  atest("loops respect autocbs", function(cb) {
    var bar, ok, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    ok = false;
    bar = function(autocb) {
      var i, ___iced_passed_deferral1, __iced_deferrals, __iced_k, _i, _results, _while,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i <= 10)) {
          return _break();
        } else {

          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral1,
              filename: "test/iced.coffee",
              funcname: "bar"
            });
            delay(__iced_deferrals.defer({
              lineno: 202
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return _next(ok = true);
          });
        }
      };
      _while(__iced_k);
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(__iced_deferrals.defer({
        lineno: 204
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(ok, {});
    });
  });

  atest("test scoping", function(cb) {
    var MyClass, o, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    MyClass = (function() {
      function MyClass() {
        this.val = 0;
      }

      MyClass.prototype.run = function(autocb) {
        var Inner, i, ___iced_passed_deferral1, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        this.val++;
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral1,
            filename: "test/iced.coffee",
            funcname: "MyClass.run"
          });
          delay(__iced_deferrals.defer({
            lineno: 212
          }));
          __iced_deferrals._fulfill();
        })(function() {
          _this.val++;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral1,
              filename: "test/iced.coffee",
              funcname: "MyClass.run"
            });
            Inner = (function() {
              function Inner() {}

              Inner.prototype.chill = function(autocb) {
                var ___iced_passed_deferral2, __iced_deferrals, __iced_k,
                  _this = this;
                __iced_k = autocb;
                ___iced_passed_deferral2 = iced.findDeferral(arguments);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral2,
                    filename: "test/iced.coffee",
                    funcname: "Inner.chill"
                  });
                  delay(__iced_deferrals.defer({
                    lineno: 217
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  autocb(_this.val = 0);
                  return;
                });
              };

              return Inner;

            })();
            i = new Inner;
            i.chill(__iced_deferrals.defer({
              lineno: 220
            }));
            __iced_deferrals._fulfill();
          })(function() {
            _this.val++;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral1,
                filename: "test/iced.coffee",
                funcname: "MyClass.run"
              });
              delay(__iced_deferrals.defer({
                lineno: 222
              }));
              __iced_deferrals._fulfill();
            })(function() {
              _this.val++;
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral1,
                  filename: "test/iced.coffee",
                  funcname: "MyClass.run"
                });
                (function(autocb) {
                  var Inner, i, ___iced_passed_deferral2, __iced_deferrals, __iced_k;
                  __iced_k = autocb;
                  ___iced_passed_deferral2 = iced.findDeferral(arguments);
                  Inner = (function() {
                    function Inner() {}

                    Inner.prototype.chill = function(autocb) {
                      var ___iced_passed_deferral3, __iced_deferrals, __iced_k,
                        _this = this;
                      __iced_k = autocb;
                      ___iced_passed_deferral3 = iced.findDeferral(arguments);
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral3,
                          filename: "test/iced.coffee",
                          funcname: "Inner.chill"
                        });
                        delay(__iced_deferrals.defer({
                          lineno: 228
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        autocb(_this.val = 0);
                        return;
                      });
                    };

                    return Inner;

                  })();
                  i = new Inner;
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral2,
                    filename: "test/iced.coffee"
                  });
                  i.chill(__iced_deferrals.defer({
                    lineno: 231
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_deferrals.defer({
                  lineno: 232
                }));
                __iced_deferrals._fulfill();
              })(function() {
                autocb(++_this.val);
                return;
              });
            });
          });
        });
      };

      MyClass.prototype.getVal = function() {
        return this.val;
      };

      return MyClass;

    })();
    o = new MyClass;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      o.run(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return v = arguments[0];
          };
        })(),
        lineno: 236
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(v === 5, {});
    });
  });

  atest("AT variable works in an await (2)", function(cb) {
    var MyClass, o, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    MyClass = (function() {
      function MyClass() {
        this.val = 0;
      }

      MyClass.prototype.inc = function() {
        return this.val++;
      };

      MyClass.prototype.chill = function(autocb) {
        var ___iced_passed_deferral1, __iced_deferrals, __iced_k;
        __iced_k = autocb;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "MyClass.chill"
        });
        delay(__iced_deferrals.defer({
          lineno: 243
        }));
        __iced_deferrals._fulfill();
      };

      MyClass.prototype.run = function(autocb) {
        var i, ___iced_passed_deferral1, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral1,
            filename: "test/iced.coffee",
            funcname: "MyClass.run"
          });
          _this.chill(__iced_deferrals.defer({
            lineno: 245
          }));
          __iced_deferrals._fulfill();
        })(function() {
          var _i, _results, _while;
          i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(i <= 9)) {
              return _break();
            } else {

              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral1,
                  filename: "test/iced.coffee",
                  funcname: "MyClass.run"
                });
                _this.chill(__iced_deferrals.defer({
                  lineno: 247
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(_this.inc());
              });
            }
          };
          _while(__iced_k);
        });
      };

      MyClass.prototype.getVal = function() {
        return this.val;
      };

      return MyClass;

    })();
    o = new MyClass;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      o.run(__iced_deferrals.defer({
        lineno: 251
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(o.getVal() === 10, {});
    });
  });

  atest("another autocb gotcha", function(cb) {
    var bar, ok, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function(autocb) {
      var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      if (true) {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral1,
            filename: "test/iced.coffee",
            funcname: "bar"
          });
          delay(__iced_deferrals.defer({
            lineno: 256
          }));
          __iced_deferrals._fulfill();
        })(__iced_k);
      } else {
        return __iced_k();
      }
    };
    ok = false;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(__iced_deferrals.defer({
        lineno: 258
      }));
      __iced_deferrals._fulfill();
    })(function() {
      ok = true;
      return cb(ok, {});
    });
  });

  atest("fat arrow versus iced", function(cb) {
    var Foo, f, ok1, ok2, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    Foo = (function() {
      function Foo() {
        this.bindings = {};
      }

      Foo.prototype.addHandler = function(key, cb) {
        return this.bindings[key] = cb;
      };

      Foo.prototype.useHandler = function() {
        var args, key, _ref;
        key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return (_ref = this.bindings)[key].apply(_ref, args);
      };

      Foo.prototype.delay = function(autocb) {
        var ___iced_passed_deferral1, __iced_deferrals, __iced_k;
        __iced_k = autocb;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "Foo.delay"
        });
        delay(__iced_deferrals.defer({
          lineno: 274
        }));
        __iced_deferrals._fulfill();
      };

      Foo.prototype.addHandlers = function() {
        var _this = this;
        this.addHandler("sleep1", function(cb) {
          var ___iced_passed_deferral1, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral1 = iced.findDeferral(arguments);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral1,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 278
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral1,
                filename: "test/iced.coffee"
              });
              _this.delay(__iced_deferrals.defer({
                lineno: 279
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(true);
            });
          });
        });
        return this.addHandler("sleep2", function(cb) {
          var ___iced_passed_deferral1, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral1 = iced.findDeferral(arguments);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral1,
              filename: "test/iced.coffee"
            });
            _this.delay(__iced_deferrals.defer({
              lineno: 282
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral1,
                filename: "test/iced.coffee"
              });
              delay(__iced_deferrals.defer({
                lineno: 283
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(true);
            });
          });
        });
      };

      return Foo;

    })();
    ok1 = ok2 = false;
    f = new Foo();
    f.addHandlers();
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      f.useHandler("sleep1", __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return ok1 = arguments[0];
          };
        })(),
        lineno: 289
      }));
      __iced_deferrals._fulfill();
    })(function() {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "test/iced.coffee"
        });
        f.useHandler("sleep2", __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ok2 = arguments[0];
            };
          })(),
          lineno: 290
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(ok1 && ok2, {});
      });
    });
  });

  atest("nested loops", function(cb) {
    var i, j, val, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    val = 0;
    (function(__iced_k) {
      var _i, _results, _while;
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i <= 9)) {
          return _break();
        } else {

          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 296
            }), 1);
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              var _j, _results1, _while;
              j = 0;
              _results1 = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results1);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++j;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results1.push(__iced_next_arg);
                  return _continue();
                };
                if (!(j <= 9)) {
                  return _break();
                } else {

                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "test/iced.coffee"
                    });
                    delay(__iced_deferrals.defer({
                      lineno: 298
                    }), 1);
                    __iced_deferrals._fulfill();
                  })(function() {
                    return _next(val++);
                  });
                }
              };
              _while(__iced_k);
            })(_next);
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(val === 100, {});
    });
  });

  atest("empty autocb", function(cb) {
    var bar, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function(autocb) {
      autocb();
      return;
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(__iced_deferrals.defer({
        lineno: 304
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(true, {});
    });
  });

  atest("more autocb (false)", function(cb) {
    var bar, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function(autocb) {
      if (false) {
        autocb(console.log("not reached"));
        return;
      }
      autocb();
      return;
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(__iced_deferrals.defer({
        lineno: 311
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(true, {});
    });
  });

  atest("more autocb (true)", function(cb) {
    var bar, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function(autocb) {
      if (true) {
        autocb(10);
        return;
      }
      autocb();
      return;
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(__iced_deferrals.defer({
        lineno: 318
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(true, {});
    });
  });

  atest("more autocb (true & false)", function(cb) {
    var bar, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function(autocb) {
      if (false) {
        autocb(10);
        return;
      } else {
        if (false) {
          autocb(11);
          return;
        }
        autocb();
        return;
      }
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(__iced_deferrals.defer({
        lineno: 328
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(true, {});
    });
  });

  atest("more autocb (while)", function(cb) {
    var bar, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function(autocb) {
      var _results;
      _results = [];
      while (false) {
        _results.push(10);
      }
      autocb(_results);
      return;
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(__iced_deferrals.defer({
        lineno: 335
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(true, {});
    });
  });

  atest("more autocb (comments)", function(cb) {
    var bar, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function(autocb) {

      /*
      blah blah blah
      */
      autocb();
      return;
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(__iced_deferrals.defer({
        lineno: 343
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(true, {});
    });
  });

  atest("until", function(cb) {
    var i, out, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    i = 10;
    out = 0;
    (function(__iced_k) {
      var _results, _while;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (i === 0) {
          return _break();
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 350
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return _next(out += i--);
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(out === 55, {});
    });
  });

  atest('super with no args', function(cb) {
    var A, P, a, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    P = (function() {
      function P() {
        this.x = 10;
      }

      return P;

    })();
    A = (function(_super) {
      __extends(A, _super);

      function A() {
        A.__super__.constructor.apply(this, arguments);
      }

      A.prototype.foo = function(cb) {
        var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral1,
            filename: "test/iced.coffee",
            funcname: "A.foo"
          });
          delay(__iced_deferrals.defer({
            lineno: 362
          }));
          __iced_deferrals._fulfill();
        })(function() {
          return cb();
        });
      };

      return A;

    })(P);
    a = new A;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      a.foo(__iced_deferrals.defer({
        lineno: 365
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(a.x === 10, {});
    });
  });

  atest('nested for .. of .. loops', function(cb) {
    var first, info, k, tot, v, x, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    x = {
      christian: {
        age: 36,
        last: "rudder"
      },
      max: {
        age: 34,
        last: "krohn"
      }
    };
    tot = 0;
    (function(__iced_k) {
      var _i, _k, _keys, _ref, _results, _while;
      _ref = x;
      _keys = (function() {
        var _results1;
        _results1 = [];
        for (_k in _ref) {
          _results1.push(_k);
        }
        return _results1;
      })();
      _i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++_i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(_i < _keys.length)) {
          return _break();
        } else {
          first = _keys[_i];
          info = _ref[first];
          tot += info.age;
          (function(__iced_k) {
            var _j, _keys1, _l, _ref1, _results1, _while;
            _ref1 = info;
            _keys1 = (function() {
              var _results2;
              _results2 = [];
              for (_l in _ref1) {
                _results2.push(_l);
              }
              return _results2;
            })();
            _j = 0;
            _results1 = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results1);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_j;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results1.push(__iced_next_arg);
                return _continue();
              };
              if (!(_j < _keys1.length)) {
                return _break();
              } else {
                k = _keys1[_j];
                v = _ref1[k];
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "test/iced.coffee"
                  });
                  delay(__iced_deferrals.defer({
                    lineno: 381
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return _next(tot++);
                });
              }
            };
            _while(__iced_k);
          })(_next);
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(tot === 74, {});
    });
  });

  atest('for + return + autocb (part 2)', function(cb) {
    var bar, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function(autocb) {
      var i, x, ___iced_passed_deferral1, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "bar"
        });
        delay(__iced_deferrals.defer({
          lineno: 387
        }));
        __iced_deferrals._fulfill();
      })(function() {
        x = (function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; _i <= 10; i = ++_i) {
            _results.push(i);
          }
          return _results;
        })();
        autocb([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
        return;
      });
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return v = arguments[0];
          };
        })(),
        lineno: 390
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(v[3] === 13, {});
    });
  });

  atest("for + guards", function(cb) {
    var i, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    v = [];
    (function(__iced_k) {
      var _i, _results, _while;
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i <= 10)) {
          return _break();
        } else {

          if (i % 2 === 0) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "test/iced.coffee"
              });
              delay(__iced_deferrals.defer({
                lineno: 396
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next(v.push(i));
            });
          } else {
            return _continue();
          }
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(v[3] === 6, {});
    });
  });

  atest("while + guards", function(cb) {
    var i, v, x, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    i = 0;
    v = [];
    (function(__iced_k) {
      var _results, _while;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!((x = i++) < 10)) {
          return _break();
        } else {
          if (x % 2 === 0) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "test/iced.coffee"
              });
              delay(__iced_deferrals.defer({
                lineno: 404
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next(v.push(x));
            });
          } else {
            return _continue();
          }
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(v[3] === 6, {});
    });
  });

  atest("nested loops + inner break", function(cb) {
    var i, j, res, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    i = 0;
    (function(__iced_k) {
      var _results, _while;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i < 10)) {
          return _break();
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 411
            }));
            __iced_deferrals._fulfill();
          })(function() {
            j = 0;
            while (j < 10) {
              if (j === 5) {
                break;
              }
              j++;
            }
            return _next(i++);
          });
        }
      };
      _while(__iced_k);
    })(function() {
      res = j * i;
      return cb(res === 50, {});
    });
  });

  atest("defer and object assignment", function(cb) {
    var baz, i, out, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    baz = function(cb) {
      var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "baz"
        });
        delay(__iced_deferrals.defer({
          lineno: 423
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb({
          a: 1,
          b: 2,
          c: 3
        });
      });
    };
    out = [];
    (function(__iced_k) {
      var _i;
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      for (i = _i = 0; _i <= 2; i = ++_i) {
        switch (i) {
          case 0:
            baz(__iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2) {
                return function() {
                  return __slot_1[__slot_2] = arguments[0]c;
                };
              })(out, i),
              lineno: 429
            }));
            break;
          case 1:
            baz(__iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2) {
                return function() {
                  return __slot_1[__slot_2] = arguments[0]b;
                };
              })(out, i),
              lineno: 430
            }));
            break;
          case 2:
            baz(__iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2) {
                return function() {
                  return __slot_1[__slot_2] = arguments[0]a;
                };
              })(out, i),
              lineno: 431
            }));
        }
      }
      __iced_deferrals._fulfill();
    })(function() {
      return cb(out[0] === 3 && out[1] === 2 && out[2] === 1, {});
    });
  });

  atest('defer + arguments', function(cb) {
    var bar, x, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function(i, cb) {
      var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
        _arguments = arguments,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "bar"
        });
        delay(__iced_deferrals.defer({
          lineno: 436
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return _arguments[1](_arguments[0]);
      });
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(10, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return x = arguments[0];
          };
        })(),
        lineno: 438
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(10 === x, {});
    });
  });

  atest('autocb + wait + scoping problems', function(cb) {
    var fun1, fun2, x, y, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    fun1 = function(autocb) {
      var i, ___iced_passed_deferral1, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "fun1"
        });
        delay(__iced_deferrals.defer({
          lineno: 445
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _results, _while;
        i = 0;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              ++i;
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(i <= 10)) {
            return _break();
          } else {

            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral1,
                filename: "test/iced.coffee",
                funcname: "fun1"
              });
              delay(__iced_deferrals.defer({
                lineno: 447
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next(1);
            });
          }
        };
        _while(__iced_k);
      });
    };
    fun2 = function(autocb) {
      var j, ___iced_passed_deferral1, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "fun2"
        });
        delay(__iced_deferrals.defer({
          lineno: 450
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _results, _while;
        j = 0;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              ++j;
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(j <= 2)) {
            return _break();
          } else {

            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral1,
                filename: "test/iced.coffee",
                funcname: "fun2"
              });
              delay(__iced_deferrals.defer({
                lineno: 452
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next(2);
            });
          }
        };
        _while(__iced_k);
      });
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      fun1(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return x = arguments[0];
          };
        })(),
        lineno: 455
      }));
      fun2(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return y = arguments[0];
          };
        })(),
        lineno: 456
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(x[0] === 1 && y[0] === 2, {});
    });
  });

  atest('for in by + await', function(cb) {
    var i, res, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    res = [];
    (function(__iced_k) {
      var _i, _results, _while;
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            i += 3;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i <= 10)) {
          return _break();
        } else {

          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 463
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return _next(res.push(i));
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(res.length === 4 && res[3] === 9, {});
    });
  });

  atest('super after await', function(cb) {
    var A, B, b, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    A = (function() {
      function A() {
        this._i = 0;
      }

      A.prototype.foo = function(cb) {
        var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral1,
            filename: "test/iced.coffee",
            funcname: "A.foo"
          });
          delay(__iced_deferrals.defer({
            lineno: 473
          }));
          __iced_deferrals._fulfill();
        })(function() {
          _this._i += 1;
          return cb();
        });
      };

      return A;

    })();
    B = (function(_super) {
      __extends(B, _super);

      function B() {
        B.__super__.constructor.apply(this, arguments);
      }

      B.prototype.foo = function(cb) {
        var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral1,
            filename: "test/iced.coffee",
            funcname: "B.foo"
          });
          delay(__iced_deferrals.defer({
            lineno: 480
          }));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral1,
              filename: "test/iced.coffee",
              funcname: "B.foo"
            });
            delay(__iced_deferrals.defer({
              lineno: 481
            }));
            __iced_deferrals._fulfill();
          })(function() {
            _this._i += 2;
            return B.__super__.foo.call(_this, cb);
          });
        });
      };

      return B;

    })(A);
    b = new B();
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      b.foo(__iced_deferrals.defer({
        lineno: 485
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(b._i === 3, {});
    });
  });

  atest('more for + when (Issue #38 via @boris-petrov)', function(cb) {
    var bar, o, x, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    x = 'x';
    bar = {
      b: 1
    };
    (function(__iced_k) {
      var _i, _len, _ref, _results, _while;
      _ref = [
        {
          p: 'a'
        }, {
          p: 'b'
        }
      ];
      _len = _ref.length;
      _i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++_i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(_i < _len)) {
          return _break();
        } else {
          o = _ref[_i];
          if (bar[o.p] != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "test/iced.coffee"
              });
              delay(__iced_deferrals.defer({
                lineno: 492
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next(x = o.p);
            });
          } else {
            return _continue();
          }
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(x === 'b', {});
    });
  });

  atest('for + ...', function(cb) {
    var i, inc, x, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    x = 0;
    inc = function() {
      return x++;
    };
    (function(__iced_k) {
      var _i, _results, _while;
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i < 10)) {
          return _break();
        } else {

          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "test/iced.coffee"
            });
            delay(__iced_deferrals.defer({
              lineno: 501
            }), 0);
            __iced_deferrals._fulfill();
          })(function() {
            return _next(inc());
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return cb(x === 10, {});
    });
  });

  atest("destructuring assignment in defer", function(cb) {
    var j, z, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    j = function(cb) {
      var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "j"
        });
        delay(__iced_deferrals.defer({
          lineno: 507
        }), 0);
        __iced_deferrals._fulfill();
      })(function() {
        return cb({
          z: 33
        });
      });
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      j(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return z = arguments[0].z;
          };
        })(),
        lineno: 509
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(z === 33, {});
    });
  });

  atest('for + return + autocb', function(cb) {
    var bar, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    bar = function(autocb) {
      var i, ___iced_passed_deferral1, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral1,
          filename: "test/iced.coffee",
          funcname: "bar"
        });
        delay(__iced_deferrals.defer({
          lineno: 514
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push(i);
        }
        autocb(_results); return;
      });
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "test/iced.coffee"
      });
      bar(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return v = arguments[0];
          };
        })(),
        lineno: 516
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(v[3] === 3, {});
    });
  });

  cantCompile = function(code) {
    return throws(function() {
      return CoffeeScript.compile(code);
    });
  };

  atest("await expression assertions 1", function(cb) {
    cantCompile('x = if true\n  await foo defer bar\n  bar\nelse\n  10');
    cantCompile('foo if true\n  await foo defer bar\n  bar\nelse 10');
    cantCompile('if (if true\n  await foo defer bar\n  bar) then 10\nelse 20');
    cantCompile('while (\n  await foo defer bar\n  bar\n  )\n  say_ho()');
    cantCompile('for i in (\n  await foo defer bar\n  bar)\n  go_nuts()');
    cantCompile('switch (\n   await foo defer bar\n   10\n )\n   when 10 then 11\n   else 20');
    return cb(true, {});
  });

}).call(this);
